import sys
import os
import asyncio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
from aiogram import Bot, Dispatcher,executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import pandas as pd
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,BotCommand
from langchain_ollama import OllamaLLM
from aiogram.dispatcher.middlewares import BaseMiddleware
from datetime import datetime, timedelta

llm = OllamaLLM(model="mistral")

# –£–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

from utils.scheduler_utils import schedule_reminder
from utils.db_utils import save_order, save_user, USERS_FILE


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7682836473:AAHYlB2aoS814_NFukG78fhboCf-IqDmDT0")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
print("bot –∑–∞–ø—É—â–µ–Ω")

from aiogram.types import BotCommand

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="order", description="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä"),
        BotCommand(command="consult", description="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –¥–≤–µ—Ä—è–º –∏ —Å–≤–∞—Ä–∫–µ"),
        BotCommand(command="stop_consult", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"),
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(dispatcher):
    await set_bot_commands(dispatcher.bot)
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    users_df = pd.read_csv(USERS_FILE) if os.path.exists(USERS_FILE) else pd.DataFrame(columns=["user_id", "date_time"])

    if users_df.empty:
        return  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º

    now = datetime.now()
    reminder_time = now + timedelta(hours=1)  # –í—Ä–µ–º—è —á–µ—Ä–µ–∑ 1 —á–∞—Å

    for _, row in users_df.iterrows():
        try:
            appointment_time = pd.to_datetime(row["date_time"])  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞—Ç—É –≤ datetime
            if appointment_time.strftime("%Y-%m-%d %H:%M") == reminder_time.strftime("%Y-%m-%d %H:%M"):
                await bot.send_message(row["user_id"], "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à –∑–∞–º–µ—Ä —á–µ—Ä–µ–∑ 1 —á–∞—Å.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            
            
# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
scheduler = AsyncIOScheduler()
scheduler.add_job(send_reminders, "interval", minutes=1)

# FSM: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
class OrderState(StatesGroup):
    phone_number=State()
    service = State()
    date_time = State()
    address = State()

class UnknownCommandMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not message.text:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if message.text.startswith("/") and message.text not in ["/start", "/order", "/consult", "/stop_consult", "/help"]:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã

dp.middleware.setup(UnknownCommandMiddleware())

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
    users_df = pd.read_csv(USERS_FILE) if os.path.exists(USERS_FILE) else pd.DataFrame(columns=["user_id"])
    if message.from_user.id in users_df["user_id"].values:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order.")
        return

    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("/üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
    await OrderState.phone_number.set()
    
@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderState.phone_number)
async def get_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user(
        user_id=message.from_user.id, 
        username=message.from_user.username, 
        full_name=message.from_user.full_name,
        phone_number=phone_number
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /order.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    help_text = (
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/order - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä\n"
        "/consult - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "/stop_consult - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    await message.answer(help_text)
    
# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–º–µ—Ä—ã
@dp.message_handler(commands=["order"])
async def start_order(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ó–∞–º–µ—Ä—ã –¥–≤–µ—Ä–µ–π", "–ó–∞–º–µ—Ä—ã –æ–∫–æ–Ω", "–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–ó–∞–º–µ—Ä—ã –ø–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏–∫—É"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    await OrderState.service.set()
    
#–†–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
user_contexts={}
ai_chat_active={}
@dp.message_handler(commands=["consult"])
async def start_consultation(message: types.Message):
    ai_chat_active[message.from_user.id]=True
    user_contexts[message.from_user.id]=[]
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
    
@dp.message_handler(commands=["stop_consult"])
async def start_consultation(message: types.Message):
    user_id = message.from_user.id
    ai_chat_active[message.from_user.id]=False
    user_contexts.pop(user_id,None)
    await message.answer("–†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /order.")
    
    

@dp.message_handler(lambda message: message.from_user.id in ai_chat_active and ai_chat_active[message.from_user.id])
async def ai_consultant(message: types.Message):
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –ø–∏—à–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –µ–º—É –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in user_contexts:
        user_contexts[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_contexts[user_id].append({"role": "user", "content": message.text})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = (
        "–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –¥–≤–µ—Ä—è–º, –æ–∫–Ω–∞–º, —Å–≤–∞—Ä–æ—á–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–µ. "
        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –Ω–µ —É—Ö–æ–¥–∏ –≤ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é, –ø–æ–ª–∏—Ç–∏–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—Å—Ç–∏. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –¥–≤–µ—Ä—è–º–∏, –æ–∫–Ω–∞–º–∏, —Å–≤–∞—Ä–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–æ–π."
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    full_context = system_prompt + "\n" + "\n".join([m["content"] for m in user_contexts[user_id]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    response = llm.invoke(full_context)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_contexts[user_id].append({"role": "assistant", "content": response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
@dp.message_handler(state=OrderState.service)
async def get_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:")
    await OrderState.date_time.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∞–¥—Ä–µ—Å—É
@dp.message_handler(state=OrderState.date_time)
async def get_date_time(message: types.Message, state: FSMContext):
    try:
        print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π:", message.text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
        date_time = pd.to_datetime(message.text, format='%Y-%m-%d %H:%M')
        await state.update_data(date_time=date_time)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–µ—Ö–∞—Ç—å –º–∞—Å—Ç–µ—Ä:")
        await OrderState.address.set()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(state=OrderState.address)
async def get_address(message: types.Message, state: FSMContext):
    data = await state.get_data()
    address = message.text
    await state.update_data(address=address)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    save_order(message.from_user.id, data["service"], data["date_time"], address)  # –û–±–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_text = f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ '{data['service']}' –≤ {data['date_time']} –ø–æ –∞–¥—Ä–µ—Å—É {address}. –°–ø–∞—Å–∏–±–æ!"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–∞—Å—Ç–µ—Ä–∞
    if data["service"] in ["–ó–∞–º–µ—Ä—ã –¥–≤–µ—Ä–µ–π", "–ó–∞–º–µ—Ä—ã –æ–∫–æ–Ω"]:
        response_text += "\n–ù–æ–º–µ—Ä –ú–∞—Å—Ç–µ—Ä–∞: 8(909)397-19-79"
    elif data["service"] == "–ó–∞–º–µ—Ä—ã –ø–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏–∫—É":
        response_text += "\n–ù–æ–º–µ—Ä –ú–∞—Å—Ç–µ—Ä–∞: +7927283-20-47"
    else:
        response_text += "\n–ù–æ–º–µ—Ä –ú–∞—Å—Ç–µ—Ä–∞: 8995552-01-13"

    await message.answer(response_text)
    try:
        appointment_time = pd.to_datetime(data["date_time"], format = '%Y-%m-%d %H:%M')
        reminder_time = appointment_time-timedelta(hours=1)
        schedule_reminder(message.from_user.id,f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í {data['date_time']} —É –≤–∞—Å '{data['service']}' –ø–æ –∞–¥—Ä–µ—Å—É {address}.", reminder_time)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    await state.finish()
    
    
    
async def main():
    await on_startup(dp)
    scheduler.start()  # –ó–∞–ø—É—Å–∫ APScheduler
    await dp.start_polling()

if __name__ == "main":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
executor.start_polling(dp,on_startup=on_startup)